// Model H_4_1:1
// p5 is where the SFS gets created
// p1 is where it will be CD
initialize() {
	//setSeed(seed);
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(keepPedigrees=T);
	defineConstant("K", 1000);	// carrying capacity
	defineConstant("St", 10);	// Stack size
	defineConstant("Wb1", 0.4);	// parameter 1 for rweibull
	defineConstant("Wb2", 0.22);	// parameter 2 for rweibull
	
	// neutral mutations, which are allowed to fix
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = T;
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeMutationRate(1e-5);
	initializeRecombinationRate(1e-8);
}

// Reproduction: stack-SFS reproduction
// Severity of SFS depending on the third parameter of rweibull()
// 0.55 = very weak (very very max ~ 20)
// 0.25 = very strong (max can be > 500 => a whole pop generated by one stack).
1:200 reproduction() {
	for (subpopA in sim.subpopulations){
		check = 0;
		everyb = subpopA.individuals;
		rind = sample(everyb,length(everyb),replace=F);
		
		while (check < K){
			if (length(rind) >= 40){
				parents = rind[0:19];
				rind = rind[20:(length(rind)-1)];
				for (z in 1:100){
					parent1 = sample(parents[0:9],1);
					parent2 = sample(parents[10:19],1);
					if (parent2 != parent1){
						litter = asInteger(rweibull(1,0.4,0.55));
						check = check + litter;
						for (j in 1:litter){
							subpopA.addCrossed(parent1, parent2);
						}}
				}} else {
				parent1 = sample(rind[0:9],1);
				parent2 = sample(rind[10:19],1);
				if (parent2 != parent1){
					litter = asInteger(rweibull(1,0.4,0.55));
					check = check + litter;
					for (w in 1:litter){
						subpopA.addCrossed(parent1, parent2);
					}}}
		}}
	
	// disable this callback for this generation
	self.active = 0;
}

201 reproduction() {
	for (subpopA in sim.subpopulations[c(0,1,2,3)]){
		check = 0;
		everyb = subpopA.individuals;
		rind = sample(everyb,length(everyb),replace=F);
		
		while (check < K){
			if (length(rind) >= 40){
				parents = rind[0:19];
				rind = rind[20:(length(rind)-1)];
				for (z in 1:100){
					parent1 = sample(parents[0:9],1);
					parent2 = sample(parents[10:19],1);
					if (parent2 != parent1){
						litter = asInteger(rweibull(1,0.4,0.55));
						check = check + litter;
						for (j in 1:litter){
							subpopA.addCrossed(parent1, parent2);
						}}
				}} else {
				parent1 = sample(rind[0:9],1);
				parent2 = sample(rind[10:19],1);
				if (parent2 != parent1){
					litter = asInteger(rweibull(1,0.4,0.55));
					check = check + litter;
					for (w in 1:litter){
						subpopA.addCrossed(parent1, parent2);
					}}}
		}}
	
	
	// Here is where you change stuff
	check = 0;
	everyb = p5.individuals;
	rind = sample(everyb,length(everyb),replace=F);
	
	while (check < K){
				parents = rind[0:(St-1)];
					parent1 = parents[0];
					parent2 = sample(parents[(asInteger(St/2)):(St-1)],1);
						litter = asInteger(rweibull(1,Wb1,Wb2));
						check = check + litter;
						for (j in 1:litter){
							p5.addCrossed(parent1, parent2);
						
				}
		}
	
	// disable this callback for this generation
	self.active = 0;
}

202:204 reproduction() {
	for (subpopA in sim.subpopulations){
		check = 0;
		everyb = subpopA.individuals;
		rind = sample(everyb,length(everyb),replace=F);
		
		while (check < K){
			if (length(rind) >= 40){
				parents = rind[0:19];
				rind = rind[20:(length(rind)-1)];
				for (z in 1:100){
					parent1 = sample(parents[0:9],1);
					parent2 = sample(parents[10:19],1);
					if (parent2 != parent1){
						litter = asInteger(rweibull(1,0.4,0.55));
						check = check + litter;
						for (j in 1:litter){
							subpopA.addCrossed(parent1, parent2);
						}}
				}} else {
				parent1 = sample(rind[0:9],1);
				parent2 = sample(rind[10:19],1);
				if (parent2 != parent1){
					litter = asInteger(rweibull(1,0.4,0.55));
					check = check + litter;
					for (w in 1:litter){
						subpopA.addCrossed(parent1, parent2);
					}}}
		}}
	
	// disable this callback for this generation
	self.active = 0;
}


// create an initial population of 500 individuals
1 early() {
	sim.addSubpop("p1", 500);
	sim.addSubpop("p2", 500);
	sim.addSubpop("p3", 500);
	sim.addSubpop("p4", 500);
	sim.addSubpop("p5", 500);

}
// provide density-dependent selection with non-overlapping generations
1:200 early() {

// migration: random
// every offspring migrate to a random subpop
party1 = sim.subpopulations[0].individuals;
party2 = sim.subpopulations[1].individuals;
party3 = sim.subpopulations[2].individuals;
party4 = sim.subpopulations[3].individuals;
party5 = sim.subpopulations[4].individuals;

for (migrant1 in party1){
dest = sample(c(p2,p3,p4,p5),1);
dest.takeMigrants(migrant1);
}

for (migrant2 in party2){
dest = sample(c(p1,p3,p4,p5),1);
dest.takeMigrants(migrant2);
}

for (migrant3 in party3){
dest = sample(c(p2,p1,p4,p5),1);
dest.takeMigrants(migrant3);
}

for (migrant4 in party4){
dest = sample(c(p2,p3,p1,p5),1);
dest.takeMigrants(migrant4);
}

for (migrant5 in party5){
dest = sample(c(p2,p3,p4,p1),1);
dest.takeMigrants(migrant5);
}


	for (subpopB in sim.subpopulations){
		inds = subpopB.individuals;
		inds.fitnessScaling = ifelse(inds.age == 0, 1.0, 0.0);
		subpopB.fitnessScaling = K / sum(inds.fitnessScaling);
	}}
	
201 early(){
party1 = sim.subpopulations[0].individuals;
party2 = sim.subpopulations[1].individuals;
party3 = sim.subpopulations[2].individuals;
party4 = sim.subpopulations[3].individuals;
party5 = sim.subpopulations[4].individuals;

for (migrant1 in party1){
dest = sample(c(p2,p5),1);
dest.takeMigrants(migrant1);
}

for (migrant2 in party2){
dest = sample(c(p3),1);
dest.takeMigrants(migrant2);
}

for (migrant3 in party3){
dest = sample(c(p2,p4),1);
dest.takeMigrants(migrant3);
}

for (migrant4 in party4){
dest = sample(c(p3,p5),1);
dest.takeMigrants(migrant4);
}

for (migrant5 in party5){
dest = sample(c(p1),1);
dest.takeMigrants(migrant5);
}


	for (subpopB in sim.subpopulations){
		inds = subpopB.individuals;
		inds.fitnessScaling = ifelse(inds.age == 0, 1.0, 0.0);
		subpopB.fitnessScaling = K / sum(inds.fitnessScaling);
	}
}

202:204 early() {

// migration: random
// every offspring migrate to a random subpop
party1 = sim.subpopulations[0].individuals;
party2 = sim.subpopulations[1].individuals;
party3 = sim.subpopulations[2].individuals;
party4 = sim.subpopulations[3].individuals;
party5 = sim.subpopulations[4].individuals;

for (migrant1 in party1){
dest = sample(c(p2,p5),1);
dest.takeMigrants(migrant1);
}

for (migrant2 in party2){
dest = sample(c(p1,p3),1);
dest.takeMigrants(migrant2);
}

for (migrant3 in party3){
dest = sample(c(p2,p4),1);
dest.takeMigrants(migrant3);
}

for (migrant4 in party4){
dest = sample(c(p3,p5),1);
dest.takeMigrants(migrant4);
}

for (migrant5 in party5){
dest = sample(c(p4,p1),1);
dest.takeMigrants(migrant5);
}


	for (subpopB in sim.subpopulations){
		inds = subpopB.individuals;
		inds.fitnessScaling = ifelse(inds.age == 0, 1.0, 0.0);
		subpopB.fitnessScaling = K / sum(inds.fitnessScaling);
	}}
	


// Check samples of relatedness and het
201 late() {

counter = 0;
check = 0;
while(check < 38 | check > 58 & counter <=99){

samrelT = p1.sampleIndividuals(10);
check = length(which(samrelT.relatedness(samrelT)==0.25));
samrel1 = samrelT;
counter = counter +1;
}

if (counter == 100){
print("FAIL!");
}

samrel5 = p5.sampleIndividuals(10);
samrel2 = p2.sampleIndividuals(10);
samrel3 = p3.sampleIndividuals(10);
samrel4 = p4.sampleIndividuals(10);

vcf1 = c(samrel1,samrel2,samrel3,samrel4,samrel5);
gen1 =vcf1.genomes;
gen1.outputVCF(filePath = "/vol/animalbehaviour/davidlee/Nacella/SLiM_sim/Final_Tuned_models/Future/file_prep/Final_StSt_standard/F_StSt_mid_T1_1.vcf",simplifyNucleotides=T);


catn("0: " + length(which(samrel1.relatedness(samrel1)==0)) + ", 0-0.25: " + length(which(samrel1.relatedness(samrel1)>0 & samrel1.relatedness(samrel1)<0.25)) + ", 0.25: " + length(which(samrel1.relatedness(samrel1)==0.25)) + ", 0.25-0.5: " + length(which(samrel1.relatedness(samrel1)>0.25 & samrel1.relatedness(samrel1)<0.5)) + ", 0.5: " + length(which(samrel1.relatedness(samrel1)==0.5)));
catn("0: " + length(which(samrel2.relatedness(samrel2)==0)) + ", 0-0.25: " + length(which(samrel2.relatedness(samrel2)>0 & samrel2.relatedness(samrel2)<0.25)) + ", 0.25: " + length(which(samrel2.relatedness(samrel2)==0.25)) + ", 0.25-0.5: " + length(which(samrel2.relatedness(samrel2)>0.25 & samrel2.relatedness(samrel2)<0.5)) + ", 0.5: " + length(which(samrel2.relatedness(samrel2)==0.5)));
catn("0: " + length(which(samrel3.relatedness(samrel3)==0)) + ", 0-0.25: " + length(which(samrel3.relatedness(samrel3)>0 & samrel3.relatedness(samrel3)<0.25)) + ", 0.25: " + length(which(samrel3.relatedness(samrel3)==0.25)) + ", 0.25-0.5: " + length(which(samrel3.relatedness(samrel3)>0.25 & samrel3.relatedness(samrel3)<0.5)) + ", 0.5: " + length(which(samrel3.relatedness(samrel3)==0.5)));
catn("0: " + length(which(samrel4.relatedness(samrel4)==0)) + ", 0-0.25: " + length(which(samrel4.relatedness(samrel4)>0 & samrel4.relatedness(samrel4)<0.25)) + ", 0.25: " + length(which(samrel4.relatedness(samrel4)==0.25)) + ", 0.25-0.5: " + length(which(samrel4.relatedness(samrel4)>0.25 & samrel4.relatedness(samrel4)<0.5)) + ", 0.5: " + length(which(samrel4.relatedness(samrel4)==0.5)));
catn("0: " + length(which(samrel5.relatedness(samrel5)==0)) + ", 0-0.25: " + length(which(samrel5.relatedness(samrel5)>0 & samrel5.relatedness(samrel5)<0.25)) + ", 0.25: " + length(which(samrel5.relatedness(samrel5)==0.25)) + ", 0.25-0.5: " + length(which(samrel5.relatedness(samrel5)>0.25 & samrel5.relatedness(samrel5)<0.5)) + ", 0.5: " + length(which(samrel5.relatedness(samrel5)==0.5)));

	}

202 late() {
samrel1 = p1.sampleIndividuals(10);
samrel2 = p2.sampleIndividuals(10);
samrel3 = p3.sampleIndividuals(10);
samrel4 = p4.sampleIndividuals(10);
samrel5 = p5.sampleIndividuals(10);

vcf2 = c(samrel1,samrel2,samrel3,samrel4,samrel5);
gen2 =vcf2.genomes;
gen2.outputVCF(filePath = "/vol/animalbehaviour/davidlee/Nacella/SLiM_sim/Final_Tuned_models/Future/file_prep/Final_StSt_standard/F_StSt_mid_T2_1.vcf",simplifyNucleotides=T);

catn("0: " + length(which(samrel1.relatedness(samrel1)==0)) + ", 0-0.25: " + length(which(samrel1.relatedness(samrel1)>0 & samrel1.relatedness(samrel1)<0.25)) + ", 0.25: " + length(which(samrel1.relatedness(samrel1)==0.25)) + ", 0.25-0.5: " + length(which(samrel1.relatedness(samrel1)>0.25 & samrel1.relatedness(samrel1)<0.5)) + ", 0.5: " + length(which(samrel1.relatedness(samrel1)==0.5)));
catn("0: " + length(which(samrel2.relatedness(samrel2)==0)) + ", 0-0.25: " + length(which(samrel2.relatedness(samrel2)>0 & samrel2.relatedness(samrel2)<0.25)) + ", 0.25: " + length(which(samrel2.relatedness(samrel2)==0.25)) + ", 0.25-0.5: " + length(which(samrel2.relatedness(samrel2)>0.25 & samrel2.relatedness(samrel2)<0.5)) + ", 0.5: " + length(which(samrel2.relatedness(samrel2)==0.5)));
catn("0: " + length(which(samrel3.relatedness(samrel3)==0)) + ", 0-0.25: " + length(which(samrel3.relatedness(samrel3)>0 & samrel3.relatedness(samrel3)<0.25)) + ", 0.25: " + length(which(samrel3.relatedness(samrel3)==0.25)) + ", 0.25-0.5: " + length(which(samrel3.relatedness(samrel3)>0.25 & samrel3.relatedness(samrel3)<0.5)) + ", 0.5: " + length(which(samrel3.relatedness(samrel3)==0.5)));
catn("0: " + length(which(samrel4.relatedness(samrel4)==0)) + ", 0-0.25: " + length(which(samrel4.relatedness(samrel4)>0 & samrel4.relatedness(samrel4)<0.25)) + ", 0.25: " + length(which(samrel4.relatedness(samrel4)==0.25)) + ", 0.25-0.5: " + length(which(samrel4.relatedness(samrel4)>0.25 & samrel4.relatedness(samrel4)<0.5)) + ", 0.5: " + length(which(samrel4.relatedness(samrel4)==0.5)));
catn("0: " + length(which(samrel5.relatedness(samrel5)==0)) + ", 0-0.25: " + length(which(samrel5.relatedness(samrel5)>0 & samrel5.relatedness(samrel5)<0.25)) + ", 0.25: " + length(which(samrel5.relatedness(samrel5)==0.25)) + ", 0.25-0.5: " + length(which(samrel5.relatedness(samrel5)>0.25 & samrel5.relatedness(samrel5)<0.5)) + ", 0.5: " + length(which(samrel5.relatedness(samrel5)==0.5)));
//catn("0: " + length(which(samrel1.relatedness(samrel1)==0)) + ", 0-0.25: " + length(which(samrel1.relatedness(samrel1)>0 & samrel1.relatedness(samrel1)<0.25)) + ", 0.25: " + length(which(sa$
//catn("0: " + length(which(samrel2.relatedness(samrel2)==0)) + ", 0-0.25: " + length(which(samrel2.relatedness(samrel2)>0 & samrel2.relatedness(samrel2)<0.25)) + ", 0.25: " + length(which(sa$
//catn("0: " + length(which(samrel3.relatedness(samrel3)==0)) + ", 0-0.25: " + length(which(samrel3.relatedness(samrel3)>0 & samrel3.relatedness(samrel3)<0.25)) + ", 0.25: " + length(which(sa$
//catn("0: " + length(which(samrel4.relatedness(samrel4)==0)) + ", 0-0.25: " + length(which(samrel4.relatedness(samrel4)>0 & samrel4.relatedness(samrel4)<0.25)) + ", 0.25: " + length(which(sa$
//catn("0: " + length(which(samrel5.relatedness(samrel5)==0)) + ", 0-0.25: " + length(which(samrel5.relatedness(samrel5)>0 & samrel5.relatedness(samrel5)<0.25)) + ", 0.25: " + length(which(sa$

	}

203 late() {
samrel1 = p1.sampleIndividuals(10);
samrel2 = p2.sampleIndividuals(10);
samrel3 = p3.sampleIndividuals(10);
samrel4 = p4.sampleIndividuals(10);
samrel5 = p5.sampleIndividuals(10);

vcf3 = c(samrel1,samrel2,samrel3,samrel4,samrel5);
gen3 =vcf3.genomes;
gen3.outputVCF(filePath = "/vol/animalbehaviour/davidlee/Nacella/SLiM_sim/Final_Tuned_models/Future/file_prep/Final_StSt_standard/F_StSt_mid_T3_1.vcf",simplifyNucleotides=T);

catn("0: " + length(which(samrel1.relatedness(samrel1)==0)) + ", 0-0.25: " + length(which(samrel1.relatedness(samrel1)>0 & samrel1.relatedness(samrel1)<0.25)) + ", 0.25: " + length(which(samrel1.relatedness(samrel1)==0.25)) + ", 0.25-0.5: " + length(which(samrel1.relatedness(samrel1)>0.25 & samrel1.relatedness(samrel1)<0.5)) + ", 0.5: " + length(which(samrel1.relatedness(samrel1)==0.5)));
catn("0: " + length(which(samrel2.relatedness(samrel2)==0)) + ", 0-0.25: " + length(which(samrel2.relatedness(samrel2)>0 & samrel2.relatedness(samrel2)<0.25)) + ", 0.25: " + length(which(samrel2.relatedness(samrel2)==0.25)) + ", 0.25-0.5: " + length(which(samrel2.relatedness(samrel2)>0.25 & samrel2.relatedness(samrel2)<0.5)) + ", 0.5: " + length(which(samrel2.relatedness(samrel2)==0.5)));
catn("0: " + length(which(samrel3.relatedness(samrel3)==0)) + ", 0-0.25: " + length(which(samrel3.relatedness(samrel3)>0 & samrel3.relatedness(samrel3)<0.25)) + ", 0.25: " + length(which(samrel3.relatedness(samrel3)==0.25)) + ", 0.25-0.5: " + length(which(samrel3.relatedness(samrel3)>0.25 & samrel3.relatedness(samrel3)<0.5)) + ", 0.5: " + length(which(samrel3.relatedness(samrel3)==0.5)));
catn("0: " + length(which(samrel4.relatedness(samrel4)==0)) + ", 0-0.25: " + length(which(samrel4.relatedness(samrel4)>0 & samrel4.relatedness(samrel4)<0.25)) + ", 0.25: " + length(which(samrel4.relatedness(samrel4)==0.25)) + ", 0.25-0.5: " + length(which(samrel4.relatedness(samrel4)>0.25 & samrel4.relatedness(samrel4)<0.5)) + ", 0.5: " + length(which(samrel4.relatedness(samrel4)==0.5)));
catn("0: " + length(which(samrel5.relatedness(samrel5)==0)) + ", 0-0.25: " + length(which(samrel5.relatedness(samrel5)>0 & samrel5.relatedness(samrel5)<0.25)) + ", 0.25: " + length(which(samrel5.relatedness(samrel5)==0.25)) + ", 0.25-0.5: " + length(which(samrel5.relatedness(samrel5)>0.25 & samrel5.relatedness(samrel5)<0.5)) + ", 0.5: " + length(which(samrel5.relatedness(samrel5)==0.5)));
//catn("0: " + length(which(samrel1.relatedness(samrel1)==0)) + ", 0-0.25: " + length(which(samrel1.relatedness(samrel1)>0 & samrel1.relatedness(samrel1)<0.25)) + ", 0.25: " + length(which(sa$
//catn("0: " + length(which(samrel2.relatedness(samrel2)==0)) + ", 0-0.25: " + length(which(samrel2.relatedness(samrel2)>0 & samrel2.relatedness(samrel2)<0.25)) + ", 0.25: " + length(which(sa$
//catn("0: " + length(which(samrel3.relatedness(samrel3)==0)) + ", 0-0.25: " + length(which(samrel3.relatedness(samrel3)>0 & samrel3.relatedness(samrel3)<0.25)) + ", 0.25: " + length(which(sa$
//catn("0: " + length(which(samrel4.relatedness(samrel4)==0)) + ", 0-0.25: " + length(which(samrel4.relatedness(samrel4)>0 & samrel4.relatedness(samrel4)<0.25)) + ", 0.25: " + length(which(sa$
//catn("0: " + length(which(samrel5.relatedness(samrel5)==0)) + ", 0-0.25: " + length(which(samrel5.relatedness(samrel5)>0 & samrel5.relatedness(samrel5)<0.25)) + ", 0.25: " + length(which(sa$

//catn("0: " + length(which(samrel1.relatedness(samrel1)==0)) + ", 0.25: " + length(which(samrel1.relatedness(samrel1)==0.25)) + ", 0.5: " + length(which(samrel1.relatedness(samrel1)==0.5)));
//catn("0: " + length(which(samrel2.relatedness(samrel2)==0)) + ", 0.25: " + length(which(samrel2.relatedness(samrel2)==0.25)) + ", 0.5: " + length(which(samrel2.relatedness(samrel2)==0.5)));
//catn("0: " + length(which(samrel3.relatedness(samrel3)==0)) + ", 0.25: " + length(which(samrel3.relatedness(samrel3)==0.25)) + ", 0.5: " + length(which(samrel3.relatedness(samrel3)==0.5)));
//catn("0: " + length(which(samrel4.relatedness(samrel4)==0)) + ", 0.25: " + length(which(samrel4.relatedness(samrel4)==0.25)) + ", 0.5: " + length(which(samrel4.relatedness(samrel4)==0.5)));
//catn("0: " + length(which(samrel5.relatedness(samrel5)==0)) + ", 0.25: " + length(which(samrel5.relatedness(samrel5)==0.25)) + ", 0.5: " + length(which(samrel5.relatedness(samrel5)==0.5)));

	}
	
204 late() {
samrel1 = p1.sampleIndividuals(10);
samrel2 = p2.sampleIndividuals(10);
samrel3 = p3.sampleIndividuals(10);
samrel4 = p4.sampleIndividuals(10);
samrel5 = p5.sampleIndividuals(10);

vcf4 = c(samrel1,samrel2,samrel3,samrel4,samrel5);
gen4 =vcf4.genomes;
gen4.outputVCF(filePath = "/vol/animalbehaviour/davidlee/Nacella/SLiM_sim/Final_Tuned_models/Future/file_prep/Final_StSt_standard/F_StSt_mid_T4_1.vcf",simplifyNucleotides=T);

catn("0: " + length(which(samrel1.relatedness(samrel1)==0)) + ", 0-0.25: " + length(which(samrel1.relatedness(samrel1)>0 & samrel1.relatedness(samrel1)<0.25)) + ", 0.25: " + length(which(samrel1.relatedness(samrel1)==0.25)) + ", 0.25-0.5: " + length(which(samrel1.relatedness(samrel1)>0.25 & samrel1.relatedness(samrel1)<0.5)) + ", 0.5: " + length(which(samrel1.relatedness(samrel1)==0.5)));
catn("0: " + length(which(samrel2.relatedness(samrel2)==0)) + ", 0-0.25: " + length(which(samrel2.relatedness(samrel2)>0 & samrel2.relatedness(samrel2)<0.25)) + ", 0.25: " + length(which(samrel2.relatedness(samrel2)==0.25)) + ", 0.25-0.5: " + length(which(samrel2.relatedness(samrel2)>0.25 & samrel2.relatedness(samrel2)<0.5)) + ", 0.5: " + length(which(samrel2.relatedness(samrel2)==0.5)));
catn("0: " + length(which(samrel3.relatedness(samrel3)==0)) + ", 0-0.25: " + length(which(samrel3.relatedness(samrel3)>0 & samrel3.relatedness(samrel3)<0.25)) + ", 0.25: " + length(which(samrel3.relatedness(samrel3)==0.25)) + ", 0.25-0.5: " + length(which(samrel3.relatedness(samrel3)>0.25 & samrel3.relatedness(samrel3)<0.5)) + ", 0.5: " + length(which(samrel3.relatedness(samrel3)==0.5)));
catn("0: " + length(which(samrel4.relatedness(samrel4)==0)) + ", 0-0.25: " + length(which(samrel4.relatedness(samrel4)>0 & samrel4.relatedness(samrel4)<0.25)) + ", 0.25: " + length(which(samrel4.relatedness(samrel4)==0.25)) + ", 0.25-0.5: " + length(which(samrel4.relatedness(samrel4)>0.25 & samrel4.relatedness(samrel4)<0.5)) + ", 0.5: " + length(which(samrel4.relatedness(samrel4)==0.5)));
catn("0: " + length(which(samrel5.relatedness(samrel5)==0)) + ", 0-0.25: " + length(which(samrel5.relatedness(samrel5)>0 & samrel5.relatedness(samrel5)<0.25)) + ", 0.25: " + length(which(samrel5.relatedness(samrel5)==0.25)) + ", 0.25-0.5: " + length(which(samrel5.relatedness(samrel5)>0.25 & samrel5.relatedness(samrel5)<0.5)) + ", 0.5: " + length(which(samrel5.relatedness(samrel5)==0.5)));

//catn("0: " + length(which(samrel1.relatedness(samrel1)==0)) + ", 0-0.25: " + length(which(samrel1.relatedness(samrel1)>0 & samrel1.relatedness(samrel1)<0.25)) + ", 0.25: " + length(which(sa$
//catn("0: " + length(which(samrel2.relatedness(samrel2)==0)) + ", 0-0.25: " + length(which(samrel2.relatedness(samrel2)>0 & samrel2.relatedness(samrel2)<0.25)) + ", 0.25: " + length(which(sa$
//catn("0: " + length(which(samrel3.relatedness(samrel3)==0)) + ", 0-0.25: " + length(which(samrel3.relatedness(samrel3)>0 & samrel3.relatedness(samrel3)<0.25)) + ", 0.25: " + length(which(sa$
//catn("0: " + length(which(samrel4.relatedness(samrel4)==0)) + ", 0-0.25: " + length(which(samrel4.relatedness(samrel4)>0 & samrel4.relatedness(samrel4)<0.25)) + ", 0.25: " + length(which(sa$
//catn("0: " + length(which(samrel5.relatedness(samrel5)==0)) + ", 0-0.25: " + length(which(samrel5.relatedness(samrel5)>0 & samrel5.relatedness(samrel5)<0.25)) + ", 0.25: " + length(which(sa$

//catn("0: " + length(which(samrel1.relatedness(samrel1)==0)) + ", 0.125: " + length(which(samrel1.relatedness(samrel1)==0.125)) + ", 0.25: " + length(which(samrel1.relatedness(samrel1)==0.25)) + ", 0.5: " + length(which(samrel1.relatedness(samrel1)==0.5)));
//catn("0: " + length(which(samrel2.relatedness(samrel2)==0)) + ", 0.125: " + length(which(samrel1.relatedness(samrel1)==0.125)) + ", 0.25: " + length(which(samrel2.relatedness(samrel2)==0.25)) + ", 0.5: " + length(which(samrel2.relatedness(samrel2)==0.5)));
//catn("0: " + length(which(samrel3.relatedness(samrel3)==0)) + ", 0.125: " + length(which(samrel1.relatedness(samrel1)==0.125)) + ", 0.25: " + length(which(samrel3.relatedness(samrel3)==0.25)) + ", 0.5: " + length(which(samrel3.relatedness(samrel3)==0.5)));
//catn("0: " + length(which(samrel4.relatedness(samrel4)==0)) + ", 0.125: " + length(which(samrel1.relatedness(samrel1)==0.125)) + ", 0.25: " + length(which(samrel4.relatedness(samrel4)==0.25)) + ", 0.5: " + length(which(samrel4.relatedness(samrel4)==0.5)));
//catn("0: " + length(which(samrel5.relatedness(samrel5)==0)) + ", 0.125: " + length(which(samrel1.relatedness(samrel1)==0.125)) + ", 0.25: " + length(which(samrel5.relatedness(samrel5)==0.25)) + ", 0.5: " + length(which(samrel5.relatedness(samrel5)==0.5)));

	}


// output all fixed mutations at end
204 late() { sim.outputFixedMutations();
}
